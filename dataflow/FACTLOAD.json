{
	"name": "FACTLOAD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SNOWSTGTABLE",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDIM_VIOLATION",
						"type": "DatasetReference"
					},
					"name": "DIMSK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeRISK",
						"type": "DatasetReference"
					},
					"name": "RISKSK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference"
					},
					"name": "DATESK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeFACILITY",
						"type": "DatasetReference"
					},
					"name": "FACILITYSK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeLOCATION",
						"type": "DatasetReference"
					},
					"name": "LOACTIONSK"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SNOWFACTFOOD",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID as string (\"79\")",
				"}",
				"source(output(",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          INSPECTION_ID as string,",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          INSPECTION_DATE as date,",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          RISK_LEVEL as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          VIOLATION_COUNT as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          VIOLATION_SK as decimal(10,0),",
				"          VIOLATION_CAT_ID as decimal(10,0),",
				"          VIOALTION_CAT as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DIMSK",
				"source(output(",
				"          RISK_SK as decimal(10,0),",
				"          RISK_LEVEL as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> RISKSK",
				"source(output(",
				"          DATE_SK as decimal(10,0),",
				"          DAY_NAME as string,",
				"          DAY_ABBR as string,",
				"          DAY_NUM as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as decimal(2,0),",
				"          QTR_NUM as decimal(2,0),",
				"          DT as date,",
				"          YEAR_NUM as decimal(4,0),",
				"          IS_WEEKEND as decimal(2,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DATESK",
				"source(output(",
				"          FACILITY_SK as decimal(10,0),",
				"          FACILITY_TYPE as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> FACILITYSK",
				"source(output(",
				"          LOCATION_SK as decimal(10,0),",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          ZIP_CODE as decimal(20,0),",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> LOACTIONSK",
				"source1 select(mapColumn(",
				"          INSPECTION_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_COUNT",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"aggregate1 derive(DI_LOAD_DT = currentDate(),",
				"          DI_JOB_ID = $JOB_ID) ~> derivedColumn1",
				"DIMSK select(mapColumn(",
				"          VIOLATION_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select2",
				"RISKSK select(mapColumn(",
				"          RISK_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select3",
				"DATESK select(mapColumn(",
				"          DATE_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select4",
				"FACILITYSK select(mapColumn(",
				"          FACILITY_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select5",
				"LOACTIONSK select(mapColumn(",
				"          LOCATION_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select6",
				"select1, select2 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, select3 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, select4 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, select5 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, select6 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5 aggregate(groupBy(INSPECTION_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_COUNT,",
				"          VIOLATION_SK,",
				"          RISK_SK,",
				"          FACILITY_SK,",
				"          LOCATION_SK,",
				"          DATE_SK),",
				"     AGG = count(INSPECTION_ID)) ~> aggregate1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_SK as decimal(10,0),",
				"          INSPECTION_ID as string,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          VIOLATION_COUNTS as decimal(38,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date,",
				"          DATE_SK as decimal(10,0),",
				"          LOCATION_SK as decimal(10,0),",
				"          VIOLATION_SK as decimal(10,0),",
				"          FACILITY_SK as decimal(10,0),",
				"          RISK_SK as decimal(10,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_COUNTS = VIOLATION_COUNT,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT,",
				"          DATE_SK,",
				"          LOCATION_SK,",
				"          VIOLATION_SK,",
				"          FACILITY_SK,",
				"          RISK_SK",
				"     )) ~> sink1"
			]
		}
	}
}