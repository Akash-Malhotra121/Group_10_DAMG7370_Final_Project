{
	"name": "fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeDATEDIM",
						"type": "DatasetReference"
					},
					"name": "dateSK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDIMFACILITY",
						"type": "DatasetReference"
					},
					"name": "facilitySK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDIMLOCATION",
						"type": "DatasetReference"
					},
					"name": "locationSK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDIMRISK",
						"type": "DatasetReference"
					},
					"name": "riskSK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDIMVIOLATION",
						"type": "DatasetReference"
					},
					"name": "violationSK"
				},
				{
					"dataset": {
						"referenceName": "SNOWSTGTABLE",
						"type": "DatasetReference"
					},
					"name": "STGtable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snowflakefact",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "datesel"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "stgtrim"
				},
				{
					"name": "viotrim"
				},
				{
					"name": "risktrim"
				},
				{
					"name": "loctrim"
				},
				{
					"name": "factrim"
				},
				{
					"name": "select10"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select11"
				},
				{
					"name": "filter1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "derivedColumn6"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID as string (\"7\")",
				"}",
				"source(output(",
				"          DATE_SK as decimal(10,0),",
				"          DAY_NAME as string,",
				"          DAY_ABBR as string,",
				"          DAY_NUM as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as decimal(2,0),",
				"          QTR_NUM as decimal(2,0),",
				"          DT as date,",
				"          YEAR_NUM as decimal(4,0),",
				"          IS_WEEKEND as decimal(2,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> dateSK",
				"source(output(",
				"          FACILITY_SK as decimal(10,0),",
				"          FACILITY_TYPE as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> facilitySK",
				"source(output(",
				"          LOCATION_SK as decimal(10,0),",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          ZIP_CODE as decimal(20,0),",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> locationSK",
				"source(output(",
				"          RISK_SK as decimal(10,0),",
				"          RISK_LEVEL as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> riskSK",
				"source(output(",
				"          VIOLATION_SK as decimal(10,0),",
				"          VIOLATION_CAT_ID as decimal(10,0),",
				"          VIOALTION_CAT as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> violationSK",
				"source(output(",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          INSPECTION_ID as string,",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          INSPECTION_DATE as date,",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          RISK_LEVEL as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          VIOLATION_COUNT as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> STGtable",
				"join1 select(mapColumn(",
				"          DATE_SK,",
				"          DBA_NAME = DBA_NAME_T,",
				"          AKA_NAME = AKA_NAME_T,",
				"          FACILITY_TYPE = FACILITY_TYPE_T,",
				"          INSPECTION_ID = INSPECTION_ID_T,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE = INSPECTION_TYPE_T,",
				"          INSPECTION_RESULT = INSPECTION_RESULT_T,",
				"          VIOLATION_CATEGORY_ID,",
				"          RISK_LEVEL = RISK_LEVEL_T,",
				"          ADDRESS = ADDRESS_T,",
				"          VIOLATION_COUNT",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"join2 select(mapColumn(",
				"          DATE_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_CATEGORY_ID,",
				"          RISK_LEVEL,",
				"          ADDRESS,",
				"          VIOLATION_COUNT,",
				"          FACILITY_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select2",
				"join3 select(mapColumn(",
				"          DATE_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_CATEGORY_ID,",
				"          RISK_LEVEL,",
				"          VIOLATION_COUNT,",
				"          FACILITY_SK,",
				"          LOCATION_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select3",
				"dateSK select(mapColumn(",
				"          DATE_SK,",
				"          DT",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> datesel",
				"STGtable derive(INSPECTION_ID_T = trim(lower(INSPECTION_ID))\r",
				",",
				"          INSPECTION_TYPE_T = trim(lower(INSPECTION_TYPE))\r",
				",",
				"          INSPECTION_RESULT_T = trim(lower(INSPECTION_RESULT))\r",
				",",
				"          DBA_NAME_T = trim(lower(DBA_NAME))\r",
				",",
				"          AKA_NAME_T = trim(lower(AKA_NAME))\r",
				",",
				"          FACILITY_TYPE_T = trim(lower(FACILITY_TYPE))\r",
				",",
				"          ADDRESS_T = trim(lower(ADDRESS))\r",
				",",
				"          RISK_LEVEL_T = trim(lower(RISK_LEVEL))\r",
				",",
				"          VIOLATION_DESCRIPTION_T = trim(lower(VIOLATION_DESCRIPTION))\r",
				") ~> derivedColumn1",
				"facilitySK derive(FACILITY_TYPE_t = trim(lower(FACILITY_TYPE))\r",
				",",
				"          AKA_NAME_t = trim(lower(AKA_NAME))\r",
				",",
				"          DBA_NAME_t = trim(lower(DBA_NAME))\r",
				") ~> derivedColumn2",
				"locationSK derive(ADDRESS_t = trim(lower(ADDRESS))\r",
				") ~> derivedColumn3",
				"riskSK derive(RISK_LEVEL_T = trim(lower(RISK_LEVEL))\r",
				") ~> derivedColumn4",
				"violationSK derive(VIOLATION_DESCRIPTION_T = trim(lower(VIOLATION_DESCRIPTION))\r",
				") ~> derivedColumn5",
				"derivedColumn1 select(mapColumn(",
				"          INSPECTION_SK,",
				"          INSPECTION_DATE,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_COUNT,",
				"          INSPECTION_ID_T,",
				"          INSPECTION_TYPE_T,",
				"          INSPECTION_RESULT_T,",
				"          DBA_NAME_T,",
				"          AKA_NAME_T,",
				"          FACILITY_TYPE_T,",
				"          ADDRESS_T,",
				"          RISK_LEVEL_T,",
				"          VIOLATION_DESCRIPTION_T",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> stgtrim",
				"derivedColumn5 select(mapColumn(",
				"          VIOLATION_SK,",
				"          VIOLATION_CAT_ID,",
				"          VIOLATION_DESCRIPTION_T",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> viotrim",
				"derivedColumn4 select(mapColumn(",
				"          RISK_SK,",
				"          RISK_LEVEL_T",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> risktrim",
				"derivedColumn3 select(mapColumn(",
				"          LOCATION_SK,",
				"          ADDRESS_t",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> loctrim",
				"derivedColumn2 select(mapColumn(",
				"          FACILITY_SK,",
				"          FACILITY_TYPE_t,",
				"          AKA_NAME_t,",
				"          DBA_NAME_t",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> factrim",
				"join4 select(mapColumn(",
				"          DATE_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_COUNT,",
				"          FACILITY_SK,",
				"          LOCATION_SK,",
				"          RISK_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select10",
				"filter1 aggregate(groupBy(INSPECTION_ID,",
				"          DATE_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_SK,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_COUNT,",
				"          FACILITY_SK,",
				"          LOCATION_SK,",
				"          RISK_SK,",
				"          VIOLATION_SK),",
				"     insp = count(INSPECTION_ID)) ~> aggregate1",
				"join5 select(mapColumn(",
				"          DATE_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_COUNT,",
				"          FACILITY_SK,",
				"          LOCATION_SK,",
				"          RISK_SK,",
				"          VIOLATION_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select11",
				"select11 filter(!isNull(DATE_SK) &&",
				"!isNull(INSPECTION_ID) &&",
				"!isNull(INSPECTION_SK) &&",
				"!isNull(INSPECTION_TYPE) &&",
				"!isNull(INSPECTION_RESULT) &&",
				"!isNull(LOCATION_SK) &&",
				"!isNull(RISK_SK) &&",
				"!isNull(FACILITY_SK)&&",
				"!isNull(VIOLATION_SK)&&",
				"!isNull(VIOLATION_COUNT)",
				") ~> filter1",
				"datesel, stgtrim join(DT == INSPECTION_DATE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1, factrim join(FACILITY_TYPE == FACILITY_TYPE_t",
				"     && DBA_NAME == DBA_NAME_t",
				"     && AKA_NAME == AKA_NAME_t,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"select2, loctrim join(ADDRESS == ADDRESS_t,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"select3, risktrim join(RISK_LEVEL == RISK_LEVEL_T,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"select10, viotrim join(VIOLATION_CATEGORY_ID == VIOLATION_CAT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"aggregate1 derive(DI_LOAD_DT = currentDate(),",
				"          DI_JOB_ID = $JOB_ID) ~> derivedColumn6",
				"derivedColumn6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_SK as decimal(10,0),",
				"          INSPECTION_ID as string,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          VIOLATION_COUNTS as decimal(38,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date,",
				"          DATE_SK as decimal(10,0),",
				"          LOCATION_SK as decimal(10,0),",
				"          VIOLATION_SK as decimal(10,0),",
				"          FACILITY_SK as decimal(10,0),",
				"          RISK_SK as decimal(10,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_COUNTS = VIOLATION_COUNT,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT,",
				"          DATE_SK,",
				"          LOCATION_SK,",
				"          VIOLATION_SK,",
				"          FACILITY_SK,",
				"          RISK_SK",
				"     )) ~> sink1"
			]
		}
	}
}