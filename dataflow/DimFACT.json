{
	"name": "DimFACT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "STGFoodInspection",
						"type": "DatasetReference"
					},
					"name": "SourceSTG"
				},
				{
					"dataset": {
						"referenceName": "DFLOCATION",
						"type": "DatasetReference"
					},
					"name": "sourceLocation"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIM_LOCATION",
						"type": "DatasetReference"
					},
					"name": "sinkToDimLocation"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_PARAM as string (\"10\")",
				"}",
				"source(output(",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          INSPECTION_ID as string,",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          INSPECTION_DATE as date,",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          RISK_LEVEL as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> SourceSTG",
				"source(output(",
				"          MAX_LOCATION as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(LOCATION_SK),0) AS MAX_LOCATION FROM FOOD_DIM_SCHEMA.DIM_LOCATION',",
				"     format: 'query') ~> sourceLocation",
				"SourceSTG select(mapColumn(",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ZIP_CODE,",
				"          CITY,",
				"          STATE,",
				"          ADDRESS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(LOCATION_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"derivedColumn1, sourceLocation join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"surrogateKey1 derive(DI_JOB_ID = $JOB_PARAM,",
				"          DI_LOAD_DT = currentDate()) ~> derivedColumn1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LOCATION_SK as decimal(10,0),",
				"          LATITUDE as decimal(18,0),",
				"          LONGITUDE as decimal(10,0),",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          ZIP_CODE as decimal(10,0),",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sinkToDimLocation"
			]
		}
	}
}