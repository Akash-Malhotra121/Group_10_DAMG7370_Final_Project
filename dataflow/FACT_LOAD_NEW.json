{
	"name": "FACT_LOAD_NEW",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "STGFoodInspection",
						"type": "DatasetReference"
					},
					"name": "sourcestg"
				},
				{
					"dataset": {
						"referenceName": "DIM_LOCATION",
						"type": "DatasetReference"
					},
					"name": "sourceLOC"
				},
				{
					"dataset": {
						"referenceName": "DATEDIM",
						"type": "DatasetReference"
					},
					"name": "sourceDATE"
				},
				{
					"dataset": {
						"referenceName": "DIMFACILITY",
						"type": "DatasetReference"
					},
					"name": "sourceFACILITY"
				},
				{
					"dataset": {
						"referenceName": "DIMRISK",
						"type": "DatasetReference"
					},
					"name": "sourceRISK"
				},
				{
					"dataset": {
						"referenceName": "DIMVIOLATION",
						"type": "DatasetReference"
					},
					"name": "sourceVIOLATION"
				},
				{
					"dataset": {
						"referenceName": "factinspection",
						"type": "DatasetReference"
					},
					"name": "sourceFACTINSPECTION"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "factinspection",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "join6"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          INSPECTION_ID as string,",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          INSPECTION_DATE as date,",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          RISK_LEVEL as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          VIOLATION_COUNT as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcestg",
				"source(output(",
				"          LOCATION_SK as decimal(10,0),",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          ZIP_CODE as decimal(20,0),",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLOC",
				"source(output(",
				"          DATE_SK as decimal(10,0),",
				"          DAY_NAME as string,",
				"          DAY_ABBR as string,",
				"          DAY_NUM as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as decimal(2,0),",
				"          QTR_NUM as decimal(2,0),",
				"          DT as date,",
				"          YEAR_NUM as decimal(4,0),",
				"          IS_WEEKEND as decimal(2,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDATE",
				"source(output(",
				"          FACILITY_SK as decimal(10,0),",
				"          FACILITY_TYPE as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceFACILITY",
				"source(output(",
				"          RISK_SK as decimal(10,0),",
				"          RISK_LEVEL as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceRISK",
				"source(output(",
				"          VIOLATION_SK as decimal(10,0),",
				"          VIOLATION_CAT_ID as decimal(10,0),",
				"          VIOALTION_CAT as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceVIOLATION",
				"source(output(",
				"          MAX_FACTINSPECTIONID as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(INSPECTION_SK),0) AS MAX_FACTINSPECTIONID FROM FOOD_DIM_SCHEMA.FACT_INSPECTION',",
				"     format: 'query') ~> sourceFACTINSPECTION",
				"sourcestg, sourceLOC join(sourcestg@LATITUDE == sourceLOC@LATITUDE",
				"     && sourcestg@LONGITUDE == sourceLOC@LONGITUDE",
				"     && sourcestg@ZIP_CODE == toString(sourceLOC@ZIP_CODE)",
				"     && sourcestg@CITY == sourceLOC@CITY",
				"     && sourcestg@STATE == sourceLOC@STATE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, sourceDATE join(INSPECTION_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, sourceFACILITY join(sourcestg@FACILITY_TYPE == sourceFACILITY@FACILITY_TYPE",
				"     && sourcestg@DBA_NAME == sourceFACILITY@DBA_NAME",
				"     && sourcestg@AKA_NAME == sourceFACILITY@AKA_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, sourceRISK join(sourcestg@RISK_LEVEL == sourceRISK@RISK_LEVEL,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, sourceVIOLATION join(VIOLATION_CATEGORY_ID == VIOLATION_CAT_ID",
				"     && VIOLATION_CATEGORY == VIOALTION_CAT",
				"     && sourcestg@VIOLATION_DESCRIPTION == sourceVIOLATION@VIOLATION_DESCRIPTION,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5, sourceFACTINSPECTION join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"join6 select(mapColumn(",
				"          INSPECTION_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_DATE,",
				"          VIOLATION_COUNT,",
				"          LOCATION_SK,",
				"          DI_JOB_ID = sourceDATE@DI_JOB_ID,",
				"          DI_LOAD_DT = sourceDATE@DI_LOAD_DT,",
				"          FACILITY_SK,",
				"          RISK_SK,",
				"          VIOLATION_SK,",
				"          DATE_SK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"sourceFACILITY derive(FACILITY_TYPE = trim(lower(FACILITY_TYPE)),",
				"          DBA_NAME = trim(lower(DBA_NAME)),",
				"          AKA_NAME = trim(lower(AKA_NAME))) ~> derivedColumn1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_SK as decimal(10,0),",
				"          INSPECTION_ID as string,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          VIOLATION_COUNTS as decimal(38,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date,",
				"          DATE_SK as decimal(10,0),",
				"          LOCATION_SK as decimal(10,0),",
				"          VIOLATION_SK as decimal(10,0),",
				"          FACILITY_SK as decimal(10,0),",
				"          RISK_SK as decimal(10,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          VIOLATION_COUNTS = VIOLATION_COUNT,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT,",
				"          DATE_SK,",
				"          LOCATION_SK,",
				"          VIOLATION_SK,",
				"          FACILITY_SK,",
				"          RISK_SK",
				"     )) ~> sink1"
			]
		}
	}
}