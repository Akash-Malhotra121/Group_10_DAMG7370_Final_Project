{
	"name": "FACT_LOAD_NEW",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "STGFoodInspection",
						"type": "DatasetReference"
					},
					"name": "sourcestg"
				},
				{
					"dataset": {
						"referenceName": "DIM_LOCATION",
						"type": "DatasetReference"
					},
					"name": "sourceLOC"
				},
				{
					"dataset": {
						"referenceName": "DATEDIM",
						"type": "DatasetReference"
					},
					"name": "sourceDATE"
				},
				{
					"dataset": {
						"referenceName": "DIMFACILITY",
						"type": "DatasetReference"
					},
					"name": "sourceFACILITY"
				},
				{
					"dataset": {
						"referenceName": "DIMRISK",
						"type": "DatasetReference"
					},
					"name": "sourceRISK"
				},
				{
					"dataset": {
						"referenceName": "DIMVIOLATION",
						"type": "DatasetReference"
					},
					"name": "sourceVIOLATION"
				},
				{
					"dataset": {
						"referenceName": "factinspection",
						"type": "DatasetReference"
					},
					"name": "sourceFACTINSPECTION"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Fact_latest",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "derivedColumnFAC"
				},
				{
					"name": "derivedColumnSTG"
				},
				{
					"name": "derivedColumnLOC"
				},
				{
					"name": "derivedColumnRISK"
				},
				{
					"name": "derivedColumnVIO"
				},
				{
					"name": "select2"
				},
				{
					"name": "selectLOC"
				},
				{
					"name": "selectFAC"
				},
				{
					"name": "selectRISK"
				},
				{
					"name": "selectVIO"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          INSPECTION_ID as string,",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          INSPECTION_DATE as date,",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          RISK_LEVEL as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          VIOLATION_COUNT as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcestg",
				"source(output(",
				"          LOCATION_SK as decimal(10,0),",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string,",
				"          ZIP_CODE as decimal(20,0),",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLOC",
				"source(output(",
				"          DATE_SK as decimal(10,0),",
				"          DAY_NAME as string,",
				"          DAY_ABBR as string,",
				"          DAY_NUM as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as decimal(2,0),",
				"          QTR_NUM as decimal(2,0),",
				"          DT as date,",
				"          YEAR_NUM as decimal(4,0),",
				"          IS_WEEKEND as decimal(2,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDATE",
				"source(output(",
				"          FACILITY_SK as decimal(10,0),",
				"          FACILITY_TYPE as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceFACILITY",
				"source(output(",
				"          RISK_SK as decimal(10,0),",
				"          RISK_LEVEL as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceRISK",
				"source(output(",
				"          VIOLATION_SK as decimal(10,0),",
				"          VIOLATION_CAT_ID as decimal(10,0),",
				"          VIOALTION_CAT as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceVIOLATION",
				"source(output(",
				"          MAX_FACTINSPECTIONID as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(INSPECTION_SK),0) AS MAX_FACTINSPECTIONID FROM FOOD_DIM_SCHEMA.FACT_INSPECTION',",
				"     format: 'query') ~> sourceFACTINSPECTION",
				"aggregate2, selectLOC join(aggregate2@ADDRESS == selectLOC@ADDRESS,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select4, select3 join(INSPECTION_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, selectFAC join(select4@FACILITY_TYPE == selectFAC@FACILITY_TYPE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, selectRISK join(select4@RISK_LEVEL == selectRISK@RISK_LEVEL,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, selectVIO join(select4@VIOLATION_DESCRIPTION == selectVIO@VIOLATION_DESCRIPTION,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"sourceFACILITY derive(FACILITY_TYPE = trim(lower(FACILITY_TYPE)),",
				"          DBA_NAME = trim(lower(DBA_NAME)),",
				"          AKA_NAME = trim(lower(AKA_NAME))) ~> derivedColumnFAC",
				"sourcestg derive(FACILITY_TYPE = trim(lower(FACILITY_TYPE)),",
				"          ZIP_CODE = toInteger(ZIP_CODE),",
				"          CITY = trim(lower(CITY)),",
				"          STATE = trim(lower(STATE)),",
				"          DBA_NAME = trim(lower(DBA_NAME)),",
				"          AKA_NAME = trim(lower(AKA_NAME)),",
				"          INSPECTION_TYPE = trim(lower(INSPECTION_TYPE)),",
				"          INSPECTION_RESULT = trim(lower(INSPECTION_RESULT)),",
				"          VIOLATION_CATEGORY = trim(lower(VIOLATION_CATEGORY)),",
				"          VIOLATION_DESCRIPTION = trim(lower(VIOLATION_DESCRIPTION)),",
				"          RISK_LEVEL = trim(lower(RISK_LEVEL)),",
				"          ADDRESS = trim(lower(ADDRESS))) ~> derivedColumnSTG",
				"sourceLOC derive(ADDRESS = trim(lower(ADDRESS)),",
				"          CITY = trim(lower(CITY)),",
				"          STATE = trim(lower(STATE))) ~> derivedColumnLOC",
				"sourceRISK derive(RISK_LEVEL = trim(lower(RISK_LEVEL))) ~> derivedColumnRISK",
				"sourceVIOLATION derive(VIOALTION_CAT = trim(lower(VIOALTION_CAT)),",
				"          VIOLATION_DESCRIPTION = trim(lower(VIOLATION_DESCRIPTION))) ~> derivedColumnVIO",
				"derivedColumnSTG select(mapColumn(",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          FACILITY_TYPE,",
				"          INSPECTION_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_DATE,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_DESCRIPTION,",
				"          RISK_LEVEL,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ZIP_CODE,",
				"          CITY,",
				"          STATE,",
				"          ADDRESS,",
				"          VIOLATION_COUNT",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select2",
				"derivedColumnLOC select(mapColumn(",
				"          LOCATION_SK,",
				"          ADDRESS,",
				"          ZIP_CODE,",
				"          CITY,",
				"          STATE",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectLOC",
				"derivedColumnFAC select(mapColumn(",
				"          FACILITY_SK,",
				"          FACILITY_TYPE,",
				"          DBA_NAME,",
				"          AKA_NAME",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectFAC",
				"derivedColumnRISK select(mapColumn(",
				"          RISK_SK,",
				"          RISK_LEVEL",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectRISK",
				"derivedColumnVIO select(mapColumn(",
				"          VIOLATION_SK,",
				"          VIOLATION_CAT_ID,",
				"          VIOALTION_CAT,",
				"          VIOLATION_DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectVIO",
				"select2 aggregate(groupBy(INSPECTION_ID,",
				"          ZIP_CODE,",
				"          CITY,",
				"          STATE,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_SK,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_COUNT,",
				"          FACILITY_TYPE,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          INSPECTION_TYPE,",
				"          RISK_LEVEL,",
				"          ADDRESS,",
				"          INSPECTION_DATE,",
				"          VIOLATION_DESCRIPTION),",
				"     egg = count(INSPECTION_ID)) ~> aggregate2",
				"sourceDATE select(mapColumn(",
				"          DATE_SK,",
				"          DT",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select3",
				"join1 select(mapColumn(",
				"          INSPECTION_ID,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_SK,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_COUNT,",
				"          FACILITY_TYPE,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          INSPECTION_TYPE,",
				"          RISK_LEVEL,",
				"          INSPECTION_DATE,",
				"          egg,",
				"          LOCATION_SK,",
				"          ADDRESS = selectLOC@ADDRESS,",
				"          ZIP_CODE = selectLOC@ZIP_CODE,",
				"          CITY = selectLOC@CITY,",
				"          STATE = selectLOC@STATE,",
				"          VIOLATION_DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select4",
				"aggregate4 keyGenerate(output(ROW_NUM as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(DI_JOB_ID = \"aka\",",
				"          DI_LOAD_DT = currentTimestamp()) ~> derivedColumn1",
				"join5 aggregate(groupBy(INSPECTION_ID,",
				"          INSPECTION_RESULT,",
				"          INSPECTION_SK,",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_COUNT,",
				"          DATE_SK,",
				"          VIOLATION_SK,",
				"          RISK_SK,",
				"          LOCATION_SK,",
				"          FACILITY_SK,",
				"          INSPECTION_TYPE),",
				"     INSPECTION_DATE = first(INSPECTION_DATE),",
				"          ADDRESS = first(ADDRESS),",
				"          VIOLATION_DESCRIPTION = first(selectVIO@VIOLATION_DESCRIPTION),",
				"          DBA_NAME = first(selectFAC@DBA_NAME)) ~> aggregate4",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_SK as decimal(10,0),",
				"          INSPECTION_ID as string,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          DI_JOB_ID as string,",
				"          VIOLATION_COUNTS as decimal(38,0),",
				"          DI_LOAD_DT as date,",
				"          DATE_SK as decimal(10,0),",
				"          LOCATION_SK as decimal(10,0),",
				"          VIOLATION_SK as decimal(10,0),",
				"          FACILITY_SK as decimal(10,0),",
				"          RISK_SK as decimal(10,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_SK,",
				"          INSPECTION_ID,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_RESULT,",
				"          DI_JOB_ID,",
				"          VIOLATION_COUNTS = VIOLATION_COUNT,",
				"          DI_LOAD_DT,",
				"          DATE_SK,",
				"          LOCATION_SK,",
				"          VIOLATION_SK,",
				"          FACILITY_SK,",
				"          RISK_SK",
				"     )) ~> sink1"
			]
		}
	}
}