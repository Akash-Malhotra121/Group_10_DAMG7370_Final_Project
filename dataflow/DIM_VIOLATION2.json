{
	"name": "DIM_VIOLATION2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeStagging",
						"type": "DatasetReference"
					},
					"name": "sourceStagging"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIM_VIOLATION",
						"type": "DatasetReference"
					},
					"name": "sinkViolation"
				}
			],
			"transformations": [
				{
					"name": "selectViolation"
				},
				{
					"name": "windowViolation"
				},
				{
					"name": "split1"
				},
				{
					"name": "RemoveDuplicate"
				},
				{
					"name": "surrogateViolation"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          INSPECTION_ID as string,",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_RESULT as string,",
				"          INSPECTION_DATE as date,",
				"          VIOLATION_CATEGORY_ID as decimal(38,0),",
				"          VIOLATION_CATEGORY as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          RISK_LEVEL as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          ZIP_CODE as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStagging",
				"sourceStagging select(mapColumn(",
				"          VIOLATION_CATEGORY_ID,",
				"          VIOLATION_CATEGORY,",
				"          VIOLATION_DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectViolation",
				"selectViolation window(over(VIOLATION_CATEGORY,",
				"          VIOLATION_DESCRIPTION,",
				"          VIOLATION_CATEGORY_ID),",
				"     desc(VIOLATION_CATEGORY_ID, true),",
				"     desc(VIOLATION_DESCRIPTION, true),",
				"     Record_Count = count(1),",
				"          newest = rank()==1) ~> windowViolation",
				"windowViolation split(Record_Count==1,",
				"     newest==false(),",
				"     Record_Count>1 && newest==true(),",
				"     disjoint: false) ~> split1@(UniqueRec, OldDup, NewestDup)",
				"split1@UniqueRec, split1@NewestDup union(byName: true)~> RemoveDuplicate",
				"RemoveDuplicate keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateViolation",
				"surrogateViolation derive(DI_JOB_ID = \"aka\",",
				"          DI_LOAD_DT = currentTimestamp()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          VIOLATION_SK as decimal(10,0),",
				"          VIOLATION_CAT_ID as decimal(10,0),",
				"          VIOALTION_CAT as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          DI_LOAD_DT as date,",
				"          DI_JOB_ID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sinkViolation"
			]
		}
	}
}